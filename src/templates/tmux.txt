#!/bin/bash
set -eu
set +o history # Temporarily turn off history

# Set HISTCONTROL to ignorespace
HISTCONTROL="ignorespace"

# Define the session name
SESSION_NAME="{{ session_name }}"
LOG_FILE="{{ log_file }}"
PID_FILE="{{ pid_file }}"

# Array of commands to run in separate windows
COMMANDS=(
	{% for command in commands %}
	"{{ command }}"
	{% endfor %}
)

# Check if session does not exist yet
tmux has-session -t $SESSION_NAME 2>/dev/null && {
    echo "Session '$SESSION_NAME' already exists. Aborting." >&2
    exit 1
}

# Start a new tmux session (detached)
tmux -2u new-session -d -s $SESSION_NAME

# Initialize the PID list
AFLR_PID_LIST=""

# Function to wait for shell to be ready
wait_for_shell() {
    local window=$1
    local max_attempts=10
    local attempt=1
    local marker="AFLR_SHELL_READY_$$"  # Use PID to make marker unique
    
    # Send echo command with our marker
    tmux send-keys -t "$SESSION_NAME:$window" " echo '$marker'" C-m
    
    while [ $attempt -le $max_attempts ]; do
        if tmux capture-pane -p -t "$SESSION_NAME:$window" | grep -q "$marker"; then
            sleep 0.1  # Small delay to ensure shell is fully ready after marker
            return 0
        fi
        sleep 0.1
        attempt=$((attempt + 1))
    done
    return 1
}

# Create and rename a window for each command
for i in "${!COMMANDS[@]}"; do
    WINDOW_NAME="window-$i"
    TEMP_PID_FILE="/tmp/aflr_pid_${i}.txt"
    
    if [ $i -eq 0 ]; then
        # For the first command, send it to the first window and rename it
        tmux rename-window -t $SESSION_NAME $WINDOW_NAME
        wait_for_shell "$WINDOW_NAME"
        tmux send-keys -t $SESSION_NAME " { ${COMMANDS[$i]} & echo \$! > $TEMP_PID_FILE; clear; fg; }" C-m
    else
        # For subsequent commands, create new windows and rename them
        tmux new-window -t $SESSION_NAME -n $WINDOW_NAME
        wait_for_shell "$WINDOW_NAME"
        tmux send-keys -t $SESSION_NAME:$WINDOW_NAME " { ${COMMANDS[$i]} & echo \$! > $TEMP_PID_FILE; clear; fg; }" C-m
    fi
    
    # Add a small delay to ensure the command has started
    sleep 0.2
done

# Wait for all commands to start and PIDs to be written
sleep 1

# Capture the PIDs and verify processes are running
for i in "${!COMMANDS[@]}"; do
    TEMP_PID_FILE="/tmp/aflr_pid_${i}.txt"
    if [ -f "$TEMP_PID_FILE" ]; then
        PID=$(cat "$TEMP_PID_FILE")
        if [ -n "$PID" ]; then
            # Check if the process is actually running
            if kill -0 "$PID" 2>/dev/null; then
                if [ -z "$AFLR_PID_LIST" ]; then
                    AFLR_PID_LIST="$PID"
                else
                    AFLR_PID_LIST="$AFLR_PID_LIST:$PID"
                fi
            else
                echo "Process $PID (command: ${COMMANDS[$i]}) failed to start or crashed immediately!" >&2
                exit 1
            fi
        fi
        rm "$TEMP_PID_FILE"
    else
        echo "PID file not found for command: ${COMMANDS[$i]}" >&2
        exit 1
    fi
done

# Redirect tmux server log to a specific file
tmux pipe-pane -o -t $SESSION_NAME "cat >> $LOG_FILE"

if [ -z "$AFLR_PID_LIST" ]; then
    echo "Failed to start AFLR session '$SESSION_NAME'" >&2
    exit 1
else
    echo $AFLR_PID_LIST > "$PID_FILE"
fi

set -o history # Turn history back on
